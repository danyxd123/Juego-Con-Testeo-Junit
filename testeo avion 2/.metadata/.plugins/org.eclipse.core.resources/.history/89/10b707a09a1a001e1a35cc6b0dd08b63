package states;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class LoadingStateTest {

    private Thread loadingThread;
    private LoadingState loadingState;

    @BeforeEach
    public void setUp() {
        loadingThread = mock(Thread.class);
        loadingState = new LoadingState(loadingThread);
    }

    @Test
    public void update_assetsLoaded_changeStateAndJoinThread() throws InterruptedException {
        // Arrange
        Assets.loaded = true;

        // Act
        loadingState.update(0);

        // Assert
        verify(loadingThread).join();
        assertTrue(State.getCurrentState() instanceof MenuState);
    }

    @Test
    public void update_assetsNotLoaded_doNotChangeState() throws InterruptedException {
        // Arrange
        Assets.loaded = false;

        // Act
        loadingState.update(0);

        // Assert
        verify(loadingThread, never()).join();
        assertFalse(State.getCurrentState() instanceof MenuState);
    }

    @Test
    public void draw_correctlyDrawsLoadingScreen() {
        // Arrange
        Graphics graphics = mock(Graphics.class);

        // Act
        loadingState.draw(graphics);

        // Assert
        // Add your assertions here to verify that the loading screen is drawn correctly
    }
}

package states;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;

import gameObjects.Constants;
import graphics.Assets;
import graphics.Text;
import io.JSONParser;
import io.ScoreData;
import math.Vector2D;
import ui.Action;
import ui.Button;

public class ScoreStateTest extends State {

    Button returnButton;

    private PriorityQueue<ScoreData> highScores;

    private Comparator<ScoreData> scoreComparator;

    private ScoreData[] auxArray;

    public ScoreStateTest() {
        // Carga la imagen greyBtn en Assets si a√∫n no se ha cargado
        if (Assets.greyBtn == null) {
            Assets.init();
        }

        returnButton = new Button(Assets.greyBtn, Assets.blueBtn, ((BufferedImage) Assets.greyBtn).getHeight(),
                Constants.HEIGHT - ((BufferedImage) Assets.greyBtn).getHeight() * 2, Constants.RETURN, new Action() {
                    @Override
                    public void doAction() {
                        State.changeState(new MenuState());
                    }
                });

        scoreComparator = new Comparator<ScoreData>() {
            @Override
            public int compare(ScoreData e1, ScoreData e2) {
                return e1.getScore() < e2.getScore() ? -1 : e1.getScore() > e2.getScore() ? 1 : 0;
            }
        };

        highScores = new PriorityQueue<ScoreData>(10, scoreComparator);

        try {
            ArrayList<ScoreData> dataList = JSONParser.readFile();

            for (ScoreData d : dataList) {
                highScores.add(d);
            }

            while (highScores.size() > 10) {
                highScores.poll();
            }

        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    public void setHighScores(PriorityQueue<ScoreData> highScores) {
        this.highScores = highScores;
    }

    @Override
    public void update(float dt) {
        returnButton.update();
    }

    @Override
    public void draw(Graphics g) {
        returnButton.draw(g);

        auxArray = highScores.toArray(new ScoreData[highScores.size()]);

        Arrays.sort(auxArray, scoreComparator);

        Vector2D scorePos = new Vector2D(Constants.WIDTH / 2 - 200, 100);
        Vector2D datePos = new Vector2D(Constants.WIDTH / 2 + 200, 100);

        Text.drawText(g, Constants.SCORE, scorePos, true, Color.BLUE, Assets.fontBig);
        Text.drawText(g, Constants.DATE, datePos, true, Color.BLUE, Assets.fontBig);

        scorePos.setY(scorePos.getY() + 40);
        datePos.setY(datePos.getY() + 40);

        for (int i = auxArray.length - 1; i > -1; i--) {

            ScoreData d = auxArray[i];

            Text.drawText(g, Integer.toString(d.getScore()), scorePos, true, Color.WHITE, Assets.fontMed);
            Text.drawText(g, d.getDate(), datePos, true, Color.WHITE, Assets.fontMed);

            scorePos.setY(scorePos.getY() + 40);
            datePos.setY(datePos.getY() + 40);
        }
    }

    @Override
    public void init() {
        // TODO Auto-generated method stub
    }

    @Override
    public void resetState() {
        // TODO Auto-generated method stub
    }

    public Button getReturnButton() {
        return returnButton;
    }
}
